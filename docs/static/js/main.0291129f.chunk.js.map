{"version":3,"sources":["components/Editor.tsx","modules/Timer.ts","components/Button.tsx","components/Timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["options","fontSize","onChange","text","window","localStorage","setItem","Editor","editor","addEventListener","layout","react_default","a","createElement","lib_default","width","height","innerHeight","language","theme","value","getItem","editorDidMount","obj","initialState","time","minutes","seconds","isRunning","laps","TimerContext","createContext","Object","objectSpread","dispatch","toText","n","slice","expload","Math","floor","TimerReducer","state","action","type","concat","toConsumableArray","NormalButton","styled","button","_templateObject","ElapsedButton","_templateObject2","props","Button","isErapsed","Fragment","children","Timer","_useContext","useContext","useEffect","interval","setInterval","payload","tick","clearInterval","StyledTimer","components_Button","onClick","toggle","lap","reset","Laps","map","i","lapTime","Number","key","div","Timer_templateObject","ul","Timer_templateObject2","TimerContainer","_useReducer","useReducer","_useReducer2","slicedToArray","Provider","Timer_Timer","App","className","components_Timer","components_Editor","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0291129f.chunk.js","sourcesContent":["import React from 'react'\nimport MonacoEditor from 'react-monaco-editor'\n\nconst options = {\n  fontSize: 16,\n}\n\nconst onChange = (text) => {\n  window.localStorage.setItem('text', text)\n}\n\nconst Editor: React.FC = () => {\n  let editor\n\n  window.addEventListener('resize', () => editor.layout())\n\n  return (\n    <MonacoEditor\n      width=\"100%\"\n      height={window.innerHeight - 100}\n      language=\"markdown\"\n      theme=\"vs-dark\"\n      options={options}\n      value={window.localStorage.getItem('text') || ''}\n      onChange={onChange}\n      editorDidMount={obj => editor = obj}\n    />\n  )\n}\n\nexport default Editor\n","import { createContext } from 'react'\n\nexport interface TimerState {\n  time: number\n  minutes: string\n  seconds: string\n  isRunning: boolean\n  laps: string[]\n}\n\nexport const initialState: TimerState = {\n  time: 0,\n  minutes: '00',\n  seconds: '00',\n  isRunning: false,\n  laps: [],\n}\n\nexport const TimerContext = createContext({\n  ...initialState,\n  dispatch: null,\n})\n\nexport const tick = (dispatch) => {\n  dispatch({\n    type: 'tick',\n    payload: {},\n  })\n}\n\nexport const toggle = (dispatch) => {\n  dispatch({\n    type: 'toggle',\n    payload: {},\n  })\n}\n\nexport const reset = (dispatch) => {\n  dispatch({\n    type: 'reset',\n    payload: {},\n  })\n}\n\nexport const lap = (dispatch) => {\n  dispatch({\n    type: 'lap',\n    payload: {},\n  })\n}\n\nconst toText = n => ('00' + n).slice(-2)\n\nexport const expload = (time) => {\n  return {\n    minutes: toText(Math.floor(time / 60) % 60),\n    seconds: toText(time % 60),\n  }\n}\n\nexport default function TimerReducer(state, action) {\n  const time = state.time + 1\n\n  switch (action.type) {\n    case 'tick':\n      return {\n        ...state,\n        time,\n        ...expload(time),\n      }\n    case 'toggle':\n      return {\n        ...state,\n        isRunning: !state.isRunning,\n      }\n    case 'reset':\n      return {\n        ...initialState,\n      }\n    case 'lap':\n      return {\n        ...state,\n        laps: [ ...state.laps, state.time],\n      }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ButtonProps {\n    onClick: any\n    isRunning: boolean\n    isErapsed?: boolean\n}\n\nconst Button: React.FC<ButtonProps> = (props) => {\n  const { isErapsed } = props\n\n  return (\n    <>\n      {isErapsed ? (\n        <ElapsedButton {...props}>\n            {props.children}\n        </ElapsedButton>\n      ) : (\n        <NormalButton {...props}>\n            {props.children}\n        </NormalButton>\n      )}\n    </>\n  )\n}\n\nconst NormalButton = styled.button<ButtonProps>`\n    margin: 0 10px;\n    width: 50px;\n    height: 50px;\n    border: 1px solid #333;\n    border-radius: 50%;\n    font-size: 12px;\n    text-align: center;\n    outline: none;\n    background-color: #ccc;\n    cursor: pointer;\n    &:hover {\n        background-color: #ddd;\n    }\n    &:active {\n        background-color: #ccc\n    }\n`\n\nconst ElapsedButton = styled(NormalButton)<ButtonProps>`\n    background-color: ${ props => props.isRunning ? '#966' : '#696' };\n    &:hover {\n        background-color: ${ props => props.isRunning ? '#a77' : '#7a7' };\n    }\n    &:active {\n        background-color: ${ props => props.isRunning ? '#966' : '#696' };\n    }\n`\n\nexport default Button\n","import React, { useReducer, useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport TimerReducer, { TimerContext, initialState, expload, tick, toggle, reset, lap } from '../modules/Timer'\nimport Button from './Button'\n\nconst Timer: React.FC = () => {\n  const { minutes, seconds, isRunning, laps, dispatch } = useContext(TimerContext)\n\n  useEffect(\n    () => {\n      let interval;\n      if (isRunning) {\n        interval = setInterval(() => tick(dispatch), 1000)\n      }\n      return () => clearInterval(interval);\n    },\n    [isRunning, dispatch]\n  );\n\n  return (\n    <StyledTimer>\n      <div>\n        <span>{minutes}</span>:\n        <span>{seconds}</span>\n      </div>\n      <Button onClick={() => toggle(dispatch)} isRunning={isRunning} isErapsed>{isRunning ? 'Stop' : 'Start' }</Button>\n      <Button onClick={() => isRunning ? lap(dispatch) : reset(dispatch)} isRunning={isRunning}>{isRunning ? '+Lap' : 'Reset' }</Button>\n      <Laps>\n        {laps.map((lap, i) => {\n          const lapTime = expload(i === 0 ? lap : Number(lap) - Number(laps[i - 1]));\n          return (\n            <li key={i}>{ lapTime.minutes }m{ lapTime.seconds }s</li>\n          )\n        })}\n      </Laps>\n    </StyledTimer>\n  )\n}\n\nconst TimerContainer: React.FC = () => {\n  const [ state, dispatch ] = useReducer(TimerReducer, initialState)\n\n  return (\n    <TimerContext.Provider value={{ ...state, dispatch }}>\n        <Timer />\n    </TimerContext.Provider>\n  )\n}\n\nconst StyledTimer = styled.div`\n  display: flex;\n  justify-content: left;\n  align-items: center;\n  box-sizing: border-box;\n  padding: 0 20px;\n  width: 100%;\n  height: 100px;\n  background-color: #333;\n  font-family: monospace;\n  font-size: 50px;\n  color: #fff;\n`\n\nconst Laps = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  font-size: 16px;\n  list-style-type: none;\n  li {\n    margin: 10px;\n  }\n`\n\nexport default TimerContainer\n","import React from 'react';\nimport Editor from './components/Editor';\nimport Timer from './components/Timer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Timer />\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}