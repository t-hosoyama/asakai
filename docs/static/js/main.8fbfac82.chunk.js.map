{"version":3,"sources":["components/Editor.tsx","components/Timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["options","fontSize","onChange","text","window","localStorage","setItem","Editor","editor","addEventListener","layout","react_default","a","createElement","lib_default","width","height","innerHeight","language","theme","value","getItem","editorDidMount","obj","initialData","time","minutes","seconds","StyledTimer","styled","div","_templateObject","toText","n","slice","Timer","_React$useState","React","useState","_React$useState2","Object","slicedToArray","state","setState","setTimeout","newState","Math","floor","App","className","components_Timer","components_Editor","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAGMA,EAAU,CACdC,SAAU,IAGNC,EAAW,SAACC,GAChBC,OAAOC,aAAaC,QAAQ,OAAQH,IAsBvBI,EAnBU,WACvB,IAAIC,EAIJ,OAFAJ,OAAOK,iBAAiB,SAAU,kBAAMD,EAAOE,WAG7CC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,MAAM,OACNC,OAAQZ,OAAOa,YAAc,IAC7BC,SAAS,WACTC,MAAM,UACNnB,QAASA,EACToB,MAAOhB,OAAOC,aAAagB,QAAQ,SAAW,GAC9CnB,SAAUA,EACVoB,eAAgB,SAAAC,GAAG,OAAIf,EAASe,uSChBtC,IAAMC,EAA0B,CAC9BC,KAAM,EACNC,QAAS,KACTC,QAAS,MAGLC,EAAcC,IAAOC,IAAVC,KAYXC,EAAS,SAAAC,GAAC,OAAK,KAAOA,GAAGC,OAAO,IAwBvBC,EAtBS,WAAM,IAAAC,EACFC,IAAMC,SAAqBd,GADzBe,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACrBM,EADqBH,EAAA,GACdI,EADcJ,EAAA,GAe5B,OAFAK,WAVa,WACX,IAAMnB,EAAOiB,EAAMjB,KAAO,EACpBoB,EAAuB,CAC3BpB,OACAC,QAASM,EAAOc,KAAKC,MAAMtB,EAAO,IAAM,IACxCE,QAASK,EAAOP,EAAO,KAEzBkB,EAASE,IAGM,KAGflC,EAAAC,EAAAC,cAACe,EAAD,KACEjB,EAAAC,EAAAC,cAAA,YAAO6B,EAAMhB,SADf,IAC+Bf,EAAAC,EAAAC,cAAA,YAAO6B,EAAMf,WCjCjCqB,EATO,WACpB,OACErC,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACbtC,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,QCIcC,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8fbfac82.chunk.js","sourcesContent":["import React from 'react'\nimport MonacoEditor from 'react-monaco-editor'\n\nconst options = {\n  fontSize: 16,\n}\n\nconst onChange = (text) => {\n  window.localStorage.setItem('text', text)\n}\n\nconst Editor: React.FC = () => {\n  let editor\n\n  window.addEventListener('resize', () => editor.layout())\n\n  return (\n    <MonacoEditor\n      width=\"100%\"\n      height={window.innerHeight - 100}\n      language=\"markdown\"\n      theme=\"vs-dark\"\n      options={options}\n      value={window.localStorage.getItem('text') || ''}\n      onChange={onChange}\n      editorDidMount={obj => editor = obj}\n    />\n  )\n}\n\nexport default Editor\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface TimerState {\n  time: number\n  minutes: string\n  seconds: string\n}\n\nconst initialData: TimerState = {\n  time: 0,\n  minutes: '00',\n  seconds: '00',\n}\n\nconst StyledTimer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100px;\n  background-color: #333;\n  font-family: monospace;\n  font-size: 50px;\n  color: #fff;\n`\n\nconst toText = n => ('00' + n).slice(-2)\n\nconst Timer: React.FC = () => {\n  const [state, setState] = React.useState<TimerState>(initialData)\n\n  const tick = () => {\n    const time = state.time + 1\n    const newState: TimerState = {\n      time,\n      minutes: toText(Math.floor(time / 60) % 60),\n      seconds: toText(time % 60),\n    }\n    setState(newState)\n  }\n\n  setTimeout(tick, 1000)\n\n  return (\n    <StyledTimer>\n      <span>{state.minutes}</span>:<span>{state.seconds}</span>\n    </StyledTimer>\n  )\n}\n\nexport default Timer\n","import React from 'react';\nimport Editor from './components/Editor';\nimport Timer from './components/Timer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Timer />\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}